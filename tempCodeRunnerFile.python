from fuzzywuzzy import fuzz, process

def find_similar_names(garbage_name, name_list, topn=10):
    similar_names = process.extract(garbage_name, name_list, limit=topn)
    return similar_names

def find_best_match(predicted_names, first_two_letters):
    best_match = None
    best_score = 0
    for name, score in predicted_names:
        if name[:2].lower() == first_two_letters.lower() and score > best_score:
            best_match = name
            best_score = score
    return best_match

# Example usage
file_path = 'words_alpha.txt'

with open(file_path, 'r', encoding='utf-8') as file:
    name_list = [line.strip() for line in file]

garbage_name = 'Shaa'.lower()
predicted_names = find_similar_names(garbage_name, name_list)

if predicted_names:
    print(f"Similar names to '{garbage_name}':")
    for name, score in predicted_names:
        if(name[0] == garbage_name[0] and len(name)>2):
            print(f"{name} (Score: {score})")

    first_two_letters = garbage_name[0]
    best_match = find_best_match(predicted_names, first_two_letters)
    if best_match:
        print(f"\nBest match with the first two letters '{first_two_letters}': {best_match}")
    else:
        print(f"\nNo match found with the first two letters '{first_two_letters}'")
else:
    print(f"No similar names found for '{garbage_name}'.")
